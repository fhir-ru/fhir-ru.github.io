# FHIR GraphQL Schema. Version 4.0.1

type Composition {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: Identifier
  status: code  _status: ElementBase
  type: CodeableConcept!
  category: [CodeableConcept]
  subject: Reference
  encounter: Reference
  date: dateTime  _date: ElementBase
  author: [Reference]!
  title: String  _title: ElementBase
  confidentiality: code  _confidentiality: ElementBase
  attester: [CompositionAttester]
  custodian: Reference
  relatesTo: [CompositionRelatesTo]
  event: [CompositionEvent]
  section: [CompositionSection]
}

type CompositionAttester {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  mode: code  _mode: ElementBase
  time: dateTime  _time: ElementBase
  party: Reference
}

type CompositionRelatesTo {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  code: code  _code: ElementBase
  targetIdentifier: Identifier
  targetReference: Reference
}

type CompositionEvent {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  code: [CodeableConcept]
  period: Period
  detail: [Reference]
}

type CompositionSection {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  title: String  _title: ElementBase
  code: CodeableConcept
  author: [Reference]
  focus: Reference
  text: Narrative
  mode: code  _mode: ElementBase
  orderedBy: CodeableConcept
  entry: [Reference]
  emptyReason: CodeableConcept
  section: [CompositionSection]
}

input Composition {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: Identifier
  status: code  _status: ElementBase
  type: CodeableConcept!
  category: [CodeableConcept]
  subject: Reference
  encounter: Reference
  date: dateTime  _date: ElementBase
  author: [Reference]!
  title: String  _title: ElementBase
  confidentiality: code  _confidentiality: ElementBase
  attester: [CompositionAttester]
  custodian: Reference
  relatesTo: [CompositionRelatesTo]
  event: [CompositionEvent]
  section: [CompositionSection]
}

input CompositionAttester {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  mode: code  _mode: ElementBase
  time: dateTime  _time: ElementBase
  party: Reference
}

input CompositionRelatesTo {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  code: code  _code: ElementBase
  targetIdentifier: Identifier
  targetReference: Reference
}

input CompositionEvent {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  code: [CodeableConcept]
  period: Period
  detail: [Reference]
}

input CompositionSection {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  title: String  _title: ElementBase
  code: CodeableConcept
  author: [Reference]
  focus: Reference
  text: Narrative
  mode: code  _mode: ElementBase
  orderedBy: CodeableConcept
  entry: [Reference]
  emptyReason: CodeableConcept
  section: [CompositionSection]
}

type CompositionReadType {
  Composition(id : ID!) : Composition
}

type CompositionListType {
  CompositionList(_filter : String
    attester : [reference]
    author : [reference]
    category : [token]
    confidentiality : [token]
    context : [token]
    date : [date]
    encounter : [reference]
    entry : [reference]
    identifier : [token]
    patient : [reference]
    period : [date]
    related_id : [token]
    related_ref : [reference]
    section : [token]
    status : [token]
    subject : [reference]
    title : [String]
    type : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : [Composition]
}

type CompositionConnectionType {
  CompositionConection(_filter : String
    attester : [reference]
    author : [reference]
    category : [token]
    confidentiality : [token]
    context : [token]
    date : [date]
    encounter : [reference]
    entry : [reference]
    identifier : [token]
    patient : [reference]
    period : [date]
    related_id : [token]
    related_ref : [reference]
    section : [token]
    status : [token]
    subject : [reference]
    title : [String]
    type : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : CompositionConnection
}

type CompositionConnection {
  count : Int
  offset : Int
  pagesize : Int
  first : ID
  previous : ID
  next : ID
  last : ID
  edges : [CompositionEdge]
}

type CompositionEdge {
  mode : String
  score : Float
  resource : Composition
}

type CompositionCreateType {
  CompositionCreate(resource : Composition) : CompositionCreation
}

type CompositionCreation {
  location : String
  resource : Composition
  information : OperationOutcome
}

type CompositionUpdateType {
  CompositionUpdate(id : IDresource : Composition) : CompositionUpdate
}

type CompositionUpdate {
  resource : Composition
  information : OperationOutcome
}

type CompositionDeleteType {
  CompositionDelete(id : ID) : CompositionDelete
}

type CompositionDelete {
  information : OperationOutcome
}

