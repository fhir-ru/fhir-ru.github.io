# FHIR GraphQL Schema. Version 4.0.1

type Organization {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  active: Boolean  _active: ElementBase
  type: [CodeableConcept]
  name: String  _name: ElementBase
  alias: String  _alias: [ElementBase]
  telecom: [ContactPoint]
  address: [Address]
  partOf: Reference
  contact: [OrganizationContact]
  endpoint: [Reference]
}

type OrganizationContact {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  purpose: CodeableConcept
  name: HumanName
  telecom: [ContactPoint]
  address: Address
}

input Organization {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  active: Boolean  _active: ElementBase
  type: [CodeableConcept]
  name: String  _name: ElementBase
  alias: String  _alias: [ElementBase]
  telecom: [ContactPoint]
  address: [Address]
  partOf: Reference
  contact: [OrganizationContact]
  endpoint: [Reference]
}

input OrganizationContact {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  purpose: CodeableConcept
  name: HumanName
  telecom: [ContactPoint]
  address: Address
}

type OrganizationReadType {
  Organization(id : ID!) : Organization
}

type OrganizationListType {
  OrganizationList(_filter : String
    active : [token]
    address : [String]
    address_city : [String]
    address_country : [String]
    address_postalcode : [String]
    address_state : [String]
    address_use : [token]
    endpoint : [reference]
    identifier : [token]
    name : [String]
    partof : [reference]
    phonetic : [String]
    type : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : [Organization]
}

type OrganizationConnectionType {
  OrganizationConection(_filter : String
    active : [token]
    address : [String]
    address_city : [String]
    address_country : [String]
    address_postalcode : [String]
    address_state : [String]
    address_use : [token]
    endpoint : [reference]
    identifier : [token]
    name : [String]
    partof : [reference]
    phonetic : [String]
    type : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : OrganizationConnection
}

type OrganizationConnection {
  count : Int
  offset : Int
  pagesize : Int
  first : ID
  previous : ID
  next : ID
  last : ID
  edges : [OrganizationEdge]
}

type OrganizationEdge {
  mode : String
  score : Float
  resource : Organization
}

type OrganizationCreateType {
  OrganizationCreate(resource : Organization) : OrganizationCreation
}

type OrganizationCreation {
  location : String
  resource : Organization
  information : OperationOutcome
}

type OrganizationUpdateType {
  OrganizationUpdate(id : IDresource : Organization) : OrganizationUpdate
}

type OrganizationUpdate {
  resource : Organization
  information : OperationOutcome
}

type OrganizationDeleteType {
  OrganizationDelete(id : ID) : OrganizationDelete
}

type OrganizationDelete {
  information : OperationOutcome
}

