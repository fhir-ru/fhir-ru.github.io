# FHIR GraphQL Schema. Version 4.0.1

type PlanDefinition {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  url: uri  _url: ElementBase
  identifier: [Identifier]
  version: String  _version: ElementBase
  name: String  _name: ElementBase
  title: String  _title: ElementBase
  subtitle: String  _subtitle: ElementBase
  type: CodeableConcept
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  subjectCodeableConcept: CodeableConcept
  subjectReference: Reference
  date: dateTime  _date: ElementBase
  publisher: String  _publisher: ElementBase
  contact: [ContactDetail]
  description: markdown  _description: ElementBase
  useContext: [UsageContext]
  jurisdiction: [CodeableConcept]
  purpose: markdown  _purpose: ElementBase
  usage: String  _usage: ElementBase
  copyright: markdown  _copyright: ElementBase
  approvalDate: date  _approvalDate: ElementBase
  lastReviewDate: date  _lastReviewDate: ElementBase
  effectivePeriod: Period
  topic: [CodeableConcept]
  author: [ContactDetail]
  editor: [ContactDetail]
  reviewer: [ContactDetail]
  endorser: [ContactDetail]
  relatedArtifact: [RelatedArtifact]
  library: canonical  _library: [ElementBase]
  goal: [PlanDefinitionGoal]
  action: [PlanDefinitionAction]
}

type PlanDefinitionGoal {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  category: CodeableConcept
  description: CodeableConcept!
  priority: CodeableConcept
  start: CodeableConcept
  addresses: [CodeableConcept]
  documentation: [RelatedArtifact]
  target: [PlanDefinitionGoalTarget]
}

type PlanDefinitionGoalTarget {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  measure: CodeableConcept
  detailQuantity: Quantity
  detailRange: Range
  detailCodeableConcept: CodeableConcept
  due: Duration
}

type PlanDefinitionAction {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  prefix: String  _prefix: ElementBase
  title: String  _title: ElementBase
  description: String  _description: ElementBase
  textEquivalent: String  _textEquivalent: ElementBase
  priority: code  _priority: ElementBase
  code: [CodeableConcept]
  reason: [CodeableConcept]
  documentation: [RelatedArtifact]
  goalId: ID  _goalId: [ElementBase]
  subjectCodeableConcept: CodeableConcept
  subjectReference: Reference
  trigger: [TriggerDefinition]
  condition: [PlanDefinitionActionCondition]
  input: [DataRequirement]
  output: [DataRequirement]
  relatedAction: [PlanDefinitionActionRelatedAction]
  timingDateTime: dateTime  _timingDateTime: ElementBase
  timingAge: Age
  timingPeriod: Period
  timingDuration: Duration
  timingRange: Range
  timingTiming: Timing
  participant: [PlanDefinitionActionParticipant]
  type: CodeableConcept
  groupingBehavior: code  _groupingBehavior: ElementBase
  selectionBehavior: code  _selectionBehavior: ElementBase
  requiredBehavior: code  _requiredBehavior: ElementBase
  precheckBehavior: code  _precheckBehavior: ElementBase
  cardinalityBehavior: code  _cardinalityBehavior: ElementBase
  definitionCanonical: canonical  _definitionCanonical: ElementBase
  definitionUri: uri  _definitionUri: ElementBase
  transform: canonical  _transform: ElementBase
  dynamicValue: [PlanDefinitionActionDynamicValue]
  action: [PlanDefinitionAction]
}

type PlanDefinitionActionCondition {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  kind: code  _kind: ElementBase
  expression: Expression
}

type PlanDefinitionActionRelatedAction {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  actionId: ID  _actionId: ElementBase
  relationship: code  _relationship: ElementBase
  offsetDuration: Duration
  offsetRange: Range
}

type PlanDefinitionActionParticipant {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: code  _type: ElementBase
  role: CodeableConcept
}

type PlanDefinitionActionDynamicValue {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  path: String  _path: ElementBase
  expression: Expression
}

input PlanDefinition {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  url: uri  _url: ElementBase
  identifier: [Identifier]
  version: String  _version: ElementBase
  name: String  _name: ElementBase
  title: String  _title: ElementBase
  subtitle: String  _subtitle: ElementBase
  type: CodeableConcept
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  subjectCodeableConcept: CodeableConcept
  subjectReference: Reference
  date: dateTime  _date: ElementBase
  publisher: String  _publisher: ElementBase
  contact: [ContactDetail]
  description: markdown  _description: ElementBase
  useContext: [UsageContext]
  jurisdiction: [CodeableConcept]
  purpose: markdown  _purpose: ElementBase
  usage: String  _usage: ElementBase
  copyright: markdown  _copyright: ElementBase
  approvalDate: date  _approvalDate: ElementBase
  lastReviewDate: date  _lastReviewDate: ElementBase
  effectivePeriod: Period
  topic: [CodeableConcept]
  author: [ContactDetail]
  editor: [ContactDetail]
  reviewer: [ContactDetail]
  endorser: [ContactDetail]
  relatedArtifact: [RelatedArtifact]
  library: canonical  _library: [ElementBase]
  goal: [PlanDefinitionGoal]
  action: [PlanDefinitionAction]
}

input PlanDefinitionGoal {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  category: CodeableConcept
  description: CodeableConcept!
  priority: CodeableConcept
  start: CodeableConcept
  addresses: [CodeableConcept]
  documentation: [RelatedArtifact]
  target: [PlanDefinitionGoalTarget]
}

input PlanDefinitionGoalTarget {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  measure: CodeableConcept
  detailQuantity: Quantity
  detailRange: Range
  detailCodeableConcept: CodeableConcept
  due: Duration
}

input PlanDefinitionAction {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  prefix: String  _prefix: ElementBase
  title: String  _title: ElementBase
  description: String  _description: ElementBase
  textEquivalent: String  _textEquivalent: ElementBase
  priority: code  _priority: ElementBase
  code: [CodeableConcept]
  reason: [CodeableConcept]
  documentation: [RelatedArtifact]
  goalId: ID  _goalId: [ElementBase]
  subjectCodeableConcept: CodeableConcept
  subjectReference: Reference
  trigger: [TriggerDefinition]
  condition: [PlanDefinitionActionCondition]
  input: [DataRequirement]
  output: [DataRequirement]
  relatedAction: [PlanDefinitionActionRelatedAction]
  timingDateTime: dateTime  _timingDateTime: ElementBase
  timingAge: Age
  timingPeriod: Period
  timingDuration: Duration
  timingRange: Range
  timingTiming: Timing
  participant: [PlanDefinitionActionParticipant]
  type: CodeableConcept
  groupingBehavior: code  _groupingBehavior: ElementBase
  selectionBehavior: code  _selectionBehavior: ElementBase
  requiredBehavior: code  _requiredBehavior: ElementBase
  precheckBehavior: code  _precheckBehavior: ElementBase
  cardinalityBehavior: code  _cardinalityBehavior: ElementBase
  definitionCanonical: canonical  _definitionCanonical: ElementBase
  definitionUri: uri  _definitionUri: ElementBase
  transform: canonical  _transform: ElementBase
  dynamicValue: [PlanDefinitionActionDynamicValue]
  action: [PlanDefinitionAction]
}

input PlanDefinitionActionCondition {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  kind: code  _kind: ElementBase
  expression: Expression
}

input PlanDefinitionActionRelatedAction {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  actionId: ID  _actionId: ElementBase
  relationship: code  _relationship: ElementBase
  offsetDuration: Duration
  offsetRange: Range
}

input PlanDefinitionActionParticipant {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: code  _type: ElementBase
  role: CodeableConcept
}

input PlanDefinitionActionDynamicValue {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  path: String  _path: ElementBase
  expression: Expression
}

type PlanDefinitionReadType {
  PlanDefinition(id : ID!) : PlanDefinition
}

type PlanDefinitionListType {
  PlanDefinitionList(_filter : String
    composed_of : [reference]
    context : [token]
    context_quantity : [quantity]
    context_type : [token]
    context_type_quantity : [composite]
    context_type_value : [composite]
    date : [date]
    definition : [reference]
    depends_on : [reference]
    derived_from : [reference]
    description : [String]
    effective : [date]
    identifier : [token]
    jurisdiction : [token]
    name : [String]
    predecessor : [reference]
    publisher : [String]
    status : [token]
    successor : [reference]
    title : [String]
    topic : [token]
    type : [token]
    url : [uri]
    version : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : [PlanDefinition]
}

type PlanDefinitionConnectionType {
  PlanDefinitionConection(_filter : String
    composed_of : [reference]
    context : [token]
    context_quantity : [quantity]
    context_type : [token]
    context_type_quantity : [composite]
    context_type_value : [composite]
    date : [date]
    definition : [reference]
    depends_on : [reference]
    derived_from : [reference]
    description : [String]
    effective : [date]
    identifier : [token]
    jurisdiction : [token]
    name : [String]
    predecessor : [reference]
    publisher : [String]
    status : [token]
    successor : [reference]
    title : [String]
    topic : [token]
    type : [token]
    url : [uri]
    version : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : PlanDefinitionConnection
}

type PlanDefinitionConnection {
  count : Int
  offset : Int
  pagesize : Int
  first : ID
  previous : ID
  next : ID
  last : ID
  edges : [PlanDefinitionEdge]
}

type PlanDefinitionEdge {
  mode : String
  score : Float
  resource : PlanDefinition
}

type PlanDefinitionCreateType {
  PlanDefinitionCreate(resource : PlanDefinition) : PlanDefinitionCreation
}

type PlanDefinitionCreation {
  location : String
  resource : PlanDefinition
  information : OperationOutcome
}

type PlanDefinitionUpdateType {
  PlanDefinitionUpdate(id : IDresource : PlanDefinition) : PlanDefinitionUpdate
}

type PlanDefinitionUpdate {
  resource : PlanDefinition
  information : OperationOutcome
}

type PlanDefinitionDeleteType {
  PlanDefinitionDelete(id : ID) : PlanDefinitionDelete
}

type PlanDefinitionDelete {
  information : OperationOutcome
}

