# FHIR GraphQL Schema. Version 4.0.1

type RiskAssessment {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  basedOn: Reference
  parent: Reference
  status: code  _status: ElementBase
  method: CodeableConcept
  code: CodeableConcept
  subject: Reference!
  encounter: Reference
  occurrenceDateTime: dateTime  _occurrenceDateTime: ElementBase
  occurrencePeriod: Period
  condition: Reference
  performer: Reference
  reasonCode: [CodeableConcept]
  reasonReference: [Reference]
  basis: [Reference]
  prediction: [RiskAssessmentPrediction]
  mitigation: String  _mitigation: ElementBase
  note: [Annotation]
}

type RiskAssessmentPrediction {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  outcome: CodeableConcept
  probabilityDecimal: decimal  _probabilityDecimal: ElementBase
  probabilityRange: Range
  qualitativeRisk: CodeableConcept
  relativeRisk: decimal  _relativeRisk: ElementBase
  whenPeriod: Period
  whenRange: Range
  rationale: String  _rationale: ElementBase
}

input RiskAssessment {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  basedOn: Reference
  parent: Reference
  status: code  _status: ElementBase
  method: CodeableConcept
  code: CodeableConcept
  subject: Reference!
  encounter: Reference
  occurrenceDateTime: dateTime  _occurrenceDateTime: ElementBase
  occurrencePeriod: Period
  condition: Reference
  performer: Reference
  reasonCode: [CodeableConcept]
  reasonReference: [Reference]
  basis: [Reference]
  prediction: [RiskAssessmentPrediction]
  mitigation: String  _mitigation: ElementBase
  note: [Annotation]
}

input RiskAssessmentPrediction {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  outcome: CodeableConcept
  probabilityDecimal: decimal  _probabilityDecimal: ElementBase
  probabilityRange: Range
  qualitativeRisk: CodeableConcept
  relativeRisk: decimal  _relativeRisk: ElementBase
  whenPeriod: Period
  whenRange: Range
  rationale: String  _rationale: ElementBase
}

type RiskAssessmentReadType {
  RiskAssessment(id : ID!) : RiskAssessment
}

type RiskAssessmentListType {
  RiskAssessmentList(_filter : String
    condition : [reference]
    date : [date]
    encounter : [reference]
    identifier : [token]
    method : [token]
    patient : [reference]
    performer : [reference]
    probability : [number]
    risk : [token]
    subject : [reference]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : [RiskAssessment]
}

type RiskAssessmentConnectionType {
  RiskAssessmentConection(_filter : String
    condition : [reference]
    date : [date]
    encounter : [reference]
    identifier : [token]
    method : [token]
    patient : [reference]
    performer : [reference]
    probability : [number]
    risk : [token]
    subject : [reference]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : RiskAssessmentConnection
}

type RiskAssessmentConnection {
  count : Int
  offset : Int
  pagesize : Int
  first : ID
  previous : ID
  next : ID
  last : ID
  edges : [RiskAssessmentEdge]
}

type RiskAssessmentEdge {
  mode : String
  score : Float
  resource : RiskAssessment
}

type RiskAssessmentCreateType {
  RiskAssessmentCreate(resource : RiskAssessment) : RiskAssessmentCreation
}

type RiskAssessmentCreation {
  location : String
  resource : RiskAssessment
  information : OperationOutcome
}

type RiskAssessmentUpdateType {
  RiskAssessmentUpdate(id : IDresource : RiskAssessment) : RiskAssessmentUpdate
}

type RiskAssessmentUpdate {
  resource : RiskAssessment
  information : OperationOutcome
}

type RiskAssessmentDeleteType {
  RiskAssessmentDelete(id : ID) : RiskAssessmentDelete
}

type RiskAssessmentDelete {
  information : OperationOutcome
}

