# FHIR GraphQL Schema. Version 4.0.1

type Account {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  status: code  _status: ElementBase
  type: CodeableConcept
  name: String  _name: ElementBase
  subject: [Reference]
  servicePeriod: Period
  coverage: [AccountCoverage]
  owner: Reference
  description: String  _description: ElementBase
  guarantor: [AccountGuarantor]
  partOf: Reference
}

type AccountCoverage {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  coverage: Reference!
  priority: positiveInt  _priority: ElementBase
}

type AccountGuarantor {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  party: Reference!
  onHold: Boolean  _onHold: ElementBase
  period: Period
}

input Account {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  status: code  _status: ElementBase
  type: CodeableConcept
  name: String  _name: ElementBase
  subject: [Reference]
  servicePeriod: Period
  coverage: [AccountCoverage]
  owner: Reference
  description: String  _description: ElementBase
  guarantor: [AccountGuarantor]
  partOf: Reference
}

input AccountCoverage {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  coverage: Reference!
  priority: positiveInt  _priority: ElementBase
}

input AccountGuarantor {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  party: Reference!
  onHold: Boolean  _onHold: ElementBase
  period: Period
}

type AccountReadType {
  Account(id : ID!) : Account
}

type AccountListType {
  AccountList(_filter : String
    identifier : [token]
    name : [String]
    owner : [reference]
    patient : [reference]
    period : [date]
    status : [token]
    subject : [reference]
    type : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : [Account]
}

type AccountConnectionType {
  AccountConection(_filter : String
    identifier : [token]
    name : [String]
    owner : [reference]
    patient : [reference]
    period : [date]
    status : [token]
    subject : [reference]
    type : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : AccountConnection
}

type AccountConnection {
  count : Int
  offset : Int
  pagesize : Int
  first : ID
  previous : ID
  next : ID
  last : ID
  edges : [AccountEdge]
}

type AccountEdge {
  mode : String
  score : Float
  resource : Account
}

type AccountCreateType {
  AccountCreate(resource : Account) : AccountCreation
}

type AccountCreation {
  location : String
  resource : Account
  information : OperationOutcome
}

type AccountUpdateType {
  AccountUpdate(id : IDresource : Account) : AccountUpdate
}

type AccountUpdate {
  resource : Account
  information : OperationOutcome
}

type AccountDeleteType {
  AccountDelete(id : ID) : AccountDelete
}

type AccountDelete {
  information : OperationOutcome
}

