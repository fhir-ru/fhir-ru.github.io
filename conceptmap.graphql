# FHIR GraphQL Schema. Version 4.0.1

type ConceptMap {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  url: uri  _url: ElementBase
  identifier: Identifier
  version: String  _version: ElementBase
  name: String  _name: ElementBase
  title: String  _title: ElementBase
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  date: dateTime  _date: ElementBase
  publisher: String  _publisher: ElementBase
  contact: [ContactDetail]
  description: markdown  _description: ElementBase
  useContext: [UsageContext]
  jurisdiction: [CodeableConcept]
  purpose: markdown  _purpose: ElementBase
  copyright: markdown  _copyright: ElementBase
  sourceUri: uri  _sourceUri: ElementBase
  sourceCanonical: canonical  _sourceCanonical: ElementBase
  targetUri: uri  _targetUri: ElementBase
  targetCanonical: canonical  _targetCanonical: ElementBase
  group: [ConceptMapGroup]
}

type ConceptMapGroup {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  source: uri  _source: ElementBase
  sourceVersion: String  _sourceVersion: ElementBase
  target: uri  _target: ElementBase
  targetVersion: String  _targetVersion: ElementBase
  element: [ConceptMapGroupElement]!
  unmapped: ConceptMapGroupUnmapped
}

type ConceptMapGroupElement {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  code: code  _code: ElementBase
  display: String  _display: ElementBase
  target: [ConceptMapGroupElementTarget]
}

type ConceptMapGroupElementTarget {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  code: code  _code: ElementBase
  display: String  _display: ElementBase
  equivalence: code  _equivalence: ElementBase
  comment: String  _comment: ElementBase
  dependsOn: [ConceptMapGroupElementTargetDependsOn]
  product: [ConceptMapGroupElementTargetDependsOn]
}

type ConceptMapGroupElementTargetDependsOn {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  property: uri  _property: ElementBase
  system: canonical  _system: ElementBase
  value: String  _value: ElementBase
  display: String  _display: ElementBase
}

type ConceptMapGroupUnmapped {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  mode: code  _mode: ElementBase
  code: code  _code: ElementBase
  display: String  _display: ElementBase
  url: canonical  _url: ElementBase
}

input ConceptMap {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  url: uri  _url: ElementBase
  identifier: Identifier
  version: String  _version: ElementBase
  name: String  _name: ElementBase
  title: String  _title: ElementBase
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  date: dateTime  _date: ElementBase
  publisher: String  _publisher: ElementBase
  contact: [ContactDetail]
  description: markdown  _description: ElementBase
  useContext: [UsageContext]
  jurisdiction: [CodeableConcept]
  purpose: markdown  _purpose: ElementBase
  copyright: markdown  _copyright: ElementBase
  sourceUri: uri  _sourceUri: ElementBase
  sourceCanonical: canonical  _sourceCanonical: ElementBase
  targetUri: uri  _targetUri: ElementBase
  targetCanonical: canonical  _targetCanonical: ElementBase
  group: [ConceptMapGroup]
}

input ConceptMapGroup {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  source: uri  _source: ElementBase
  sourceVersion: String  _sourceVersion: ElementBase
  target: uri  _target: ElementBase
  targetVersion: String  _targetVersion: ElementBase
  element: [ConceptMapGroupElement]!
  unmapped: ConceptMapGroupUnmapped
}

input ConceptMapGroupElement {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  code: code  _code: ElementBase
  display: String  _display: ElementBase
  target: [ConceptMapGroupElementTarget]
}

input ConceptMapGroupElementTarget {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  code: code  _code: ElementBase
  display: String  _display: ElementBase
  equivalence: code  _equivalence: ElementBase
  comment: String  _comment: ElementBase
  dependsOn: [ConceptMapGroupElementTargetDependsOn]
  product: [ConceptMapGroupElementTargetDependsOn]
}

input ConceptMapGroupElementTargetDependsOn {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  property: uri  _property: ElementBase
  system: canonical  _system: ElementBase
  value: String  _value: ElementBase
  display: String  _display: ElementBase
}

input ConceptMapGroupUnmapped {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  mode: code  _mode: ElementBase
  code: code  _code: ElementBase
  display: String  _display: ElementBase
  url: canonical  _url: ElementBase
}

type ConceptMapReadType {
  ConceptMap(id : ID!) : ConceptMap
}

type ConceptMapListType {
  ConceptMapList(_filter : String
    context : [token]
    context_quantity : [quantity]
    context_type : [token]
    context_type_quantity : [composite]
    context_type_value : [composite]
    date : [date]
    dependson : [uri]
    description : [String]
    identifier : [token]
    jurisdiction : [token]
    name : [String]
    other : [reference]
    product : [uri]
    publisher : [String]
    source : [reference]
    source_code : [token]
    source_system : [uri]
    source_uri : [reference]
    status : [token]
    target : [reference]
    target_code : [token]
    target_system : [uri]
    target_uri : [reference]
    title : [String]
    url : [uri]
    version : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : [ConceptMap]
}

type ConceptMapConnectionType {
  ConceptMapConection(_filter : String
    context : [token]
    context_quantity : [quantity]
    context_type : [token]
    context_type_quantity : [composite]
    context_type_value : [composite]
    date : [date]
    dependson : [uri]
    description : [String]
    identifier : [token]
    jurisdiction : [token]
    name : [String]
    other : [reference]
    product : [uri]
    publisher : [String]
    source : [reference]
    source_code : [token]
    source_system : [uri]
    source_uri : [reference]
    status : [token]
    target : [reference]
    target_code : [token]
    target_system : [uri]
    target_uri : [reference]
    title : [String]
    url : [uri]
    version : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : ConceptMapConnection
}

type ConceptMapConnection {
  count : Int
  offset : Int
  pagesize : Int
  first : ID
  previous : ID
  next : ID
  last : ID
  edges : [ConceptMapEdge]
}

type ConceptMapEdge {
  mode : String
  score : Float
  resource : ConceptMap
}

type ConceptMapCreateType {
  ConceptMapCreate(resource : ConceptMap) : ConceptMapCreation
}

type ConceptMapCreation {
  location : String
  resource : ConceptMap
  information : OperationOutcome
}

type ConceptMapUpdateType {
  ConceptMapUpdate(id : IDresource : ConceptMap) : ConceptMapUpdate
}

type ConceptMapUpdate {
  resource : ConceptMap
  information : OperationOutcome
}

type ConceptMapDeleteType {
  ConceptMapDelete(id : ID) : ConceptMapDelete
}

type ConceptMapDelete {
  information : OperationOutcome
}

