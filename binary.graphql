# FHIR GraphQL Schema. Version 4.0.1

type Binary {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  contentType: code  _contentType: ElementBase
  securityContext: Reference
  data: base64Binary  _data: ElementBase
}

input Binary {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  contentType: code  _contentType: ElementBase
  securityContext: Reference
  data: base64Binary  _data: ElementBase
}

type BinaryReadType {
  Binary(id : ID!) : Binary
}

type BinaryListType {
  BinaryList(_filter : String
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : [Binary]
}

type BinaryConnectionType {
  BinaryConection(_filter : String
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : BinaryConnection
}

type BinaryConnection {
  count : Int
  offset : Int
  pagesize : Int
  first : ID
  previous : ID
  next : ID
  last : ID
  edges : [BinaryEdge]
}

type BinaryEdge {
  mode : String
  score : Float
  resource : Binary
}

type BinaryCreateType {
  BinaryCreate(resource : Binary) : BinaryCreation
}

type BinaryCreation {
  location : String
  resource : Binary
  information : OperationOutcome
}

type BinaryUpdateType {
  BinaryUpdate(id : IDresource : Binary) : BinaryUpdate
}

type BinaryUpdate {
  resource : Binary
  information : OperationOutcome
}

type BinaryDeleteType {
  BinaryDelete(id : ID) : BinaryDelete
}

type BinaryDelete {
  information : OperationOutcome
}

