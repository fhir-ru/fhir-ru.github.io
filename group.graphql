# FHIR GraphQL Schema. Version 4.0.1

type Group {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  active: Boolean  _active: ElementBase
  type: code  _type: ElementBase
  actual: Boolean  _actual: ElementBase
  code: CodeableConcept
  name: String  _name: ElementBase
  quantity: unsignedInt  _quantity: ElementBase
  managingEntity: Reference
  characteristic: [GroupCharacteristic]
  member: [GroupMember]
}

type GroupCharacteristic {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  code: CodeableConcept!
  valueCodeableConcept: CodeableConcept
  valueBoolean: Boolean  _valueBoolean: ElementBase
  valueQuantity: Quantity
  valueRange: Range
  valueReference: Reference
  exclude: Boolean  _exclude: ElementBase
  period: Period
}

type GroupMember {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  entity: Reference!
  period: Period
  inactive: Boolean  _inactive: ElementBase
}

input Group {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  active: Boolean  _active: ElementBase
  type: code  _type: ElementBase
  actual: Boolean  _actual: ElementBase
  code: CodeableConcept
  name: String  _name: ElementBase
  quantity: unsignedInt  _quantity: ElementBase
  managingEntity: Reference
  characteristic: [GroupCharacteristic]
  member: [GroupMember]
}

input GroupCharacteristic {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  code: CodeableConcept!
  valueCodeableConcept: CodeableConcept
  valueBoolean: Boolean  _valueBoolean: ElementBase
  valueQuantity: Quantity
  valueRange: Range
  valueReference: Reference
  exclude: Boolean  _exclude: ElementBase
  period: Period
}

input GroupMember {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  entity: Reference!
  period: Period
  inactive: Boolean  _inactive: ElementBase
}

type GroupReadType {
  Group(id : ID!) : Group
}

type GroupListType {
  GroupList(_filter : String
    actual : [token]
    characteristic : [token]
    characteristic_value : [composite]
    code : [token]
    exclude : [token]
    identifier : [token]
    managing_entity : [reference]
    member : [reference]
    type : [token]
    value : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : [Group]
}

type GroupConnectionType {
  GroupConection(_filter : String
    actual : [token]
    characteristic : [token]
    characteristic_value : [composite]
    code : [token]
    exclude : [token]
    identifier : [token]
    managing_entity : [reference]
    member : [reference]
    type : [token]
    value : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : GroupConnection
}

type GroupConnection {
  count : Int
  offset : Int
  pagesize : Int
  first : ID
  previous : ID
  next : ID
  last : ID
  edges : [GroupEdge]
}

type GroupEdge {
  mode : String
  score : Float
  resource : Group
}

type GroupCreateType {
  GroupCreate(resource : Group) : GroupCreation
}

type GroupCreation {
  location : String
  resource : Group
  information : OperationOutcome
}

type GroupUpdateType {
  GroupUpdate(id : IDresource : Group) : GroupUpdate
}

type GroupUpdate {
  resource : Group
  information : OperationOutcome
}

type GroupDeleteType {
  GroupDelete(id : ID) : GroupDelete
}

type GroupDelete {
  information : OperationOutcome
}

