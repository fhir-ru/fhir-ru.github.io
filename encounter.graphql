# FHIR GraphQL Schema. Version 4.0.1

type Encounter {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  status: code  _status: ElementBase
  statusHistory: [EncounterStatusHistory]
  class: Coding!
  classHistory: [EncounterClassHistory]
  type: [CodeableConcept]
  serviceType: CodeableConcept
  priority: CodeableConcept
  subject: Reference
  episodeOfCare: [Reference]
  basedOn: [Reference]
  participant: [EncounterParticipant]
  appointment: [Reference]
  period: Period
  length: Duration
  reasonCode: [CodeableConcept]
  reasonReference: [Reference]
  diagnosis: [EncounterDiagnosis]
  account: [Reference]
  hospitalization: EncounterHospitalization
  location: [EncounterLocation]
  serviceProvider: Reference
  partOf: Reference
}

type EncounterStatusHistory {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  status: code  _status: ElementBase
  period: Period!
}

type EncounterClassHistory {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  class: Coding!
  period: Period!
}

type EncounterParticipant {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: [CodeableConcept]
  period: Period
  individual: Reference
}

type EncounterDiagnosis {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  condition: Reference!
  use: CodeableConcept
  rank: positiveInt  _rank: ElementBase
}

type EncounterHospitalization {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  preAdmissionIdentifier: Identifier
  origin: Reference
  admitSource: CodeableConcept
  reAdmission: CodeableConcept
  dietPreference: [CodeableConcept]
  specialCourtesy: [CodeableConcept]
  specialArrangement: [CodeableConcept]
  destination: Reference
  dischargeDisposition: CodeableConcept
}

type EncounterLocation {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  location: Reference!
  status: code  _status: ElementBase
  physicalType: CodeableConcept
  period: Period
}

input Encounter {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  status: code  _status: ElementBase
  statusHistory: [EncounterStatusHistory]
  class: Coding!
  classHistory: [EncounterClassHistory]
  type: [CodeableConcept]
  serviceType: CodeableConcept
  priority: CodeableConcept
  subject: Reference
  episodeOfCare: [Reference]
  basedOn: [Reference]
  participant: [EncounterParticipant]
  appointment: [Reference]
  period: Period
  length: Duration
  reasonCode: [CodeableConcept]
  reasonReference: [Reference]
  diagnosis: [EncounterDiagnosis]
  account: [Reference]
  hospitalization: EncounterHospitalization
  location: [EncounterLocation]
  serviceProvider: Reference
  partOf: Reference
}

input EncounterStatusHistory {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  status: code  _status: ElementBase
  period: Period!
}

input EncounterClassHistory {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  class: Coding!
  period: Period!
}

input EncounterParticipant {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: [CodeableConcept]
  period: Period
  individual: Reference
}

input EncounterDiagnosis {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  condition: Reference!
  use: CodeableConcept
  rank: positiveInt  _rank: ElementBase
}

input EncounterHospitalization {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  preAdmissionIdentifier: Identifier
  origin: Reference
  admitSource: CodeableConcept
  reAdmission: CodeableConcept
  dietPreference: [CodeableConcept]
  specialCourtesy: [CodeableConcept]
  specialArrangement: [CodeableConcept]
  destination: Reference
  dischargeDisposition: CodeableConcept
}

input EncounterLocation {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  location: Reference!
  status: code  _status: ElementBase
  physicalType: CodeableConcept
  period: Period
}

type EncounterReadType {
  Encounter(id : ID!) : Encounter
}

type EncounterListType {
  EncounterList(_filter : String
    account : [reference]
    appointment : [reference]
    based_on : [reference]
    class : [token]
    date : [date]
    diagnosis : [reference]
    episode_of_care : [reference]
    identifier : [token]
    length : [quantity]
    location : [reference]
    location_period : [date]
    part_of : [reference]
    participant : [reference]
    participant_type : [token]
    patient : [reference]
    practitioner : [reference]
    reason_code : [token]
    reason_reference : [reference]
    service_provider : [reference]
    special_arrangement : [token]
    status : [token]
    subject : [reference]
    type : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : [Encounter]
}

type EncounterConnectionType {
  EncounterConection(_filter : String
    account : [reference]
    appointment : [reference]
    based_on : [reference]
    class : [token]
    date : [date]
    diagnosis : [reference]
    episode_of_care : [reference]
    identifier : [token]
    length : [quantity]
    location : [reference]
    location_period : [date]
    part_of : [reference]
    participant : [reference]
    participant_type : [token]
    patient : [reference]
    practitioner : [reference]
    reason_code : [token]
    reason_reference : [reference]
    service_provider : [reference]
    special_arrangement : [token]
    status : [token]
    subject : [reference]
    type : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : EncounterConnection
}

type EncounterConnection {
  count : Int
  offset : Int
  pagesize : Int
  first : ID
  previous : ID
  next : ID
  last : ID
  edges : [EncounterEdge]
}

type EncounterEdge {
  mode : String
  score : Float
  resource : Encounter
}

type EncounterCreateType {
  EncounterCreate(resource : Encounter) : EncounterCreation
}

type EncounterCreation {
  location : String
  resource : Encounter
  information : OperationOutcome
}

type EncounterUpdateType {
  EncounterUpdate(id : IDresource : Encounter) : EncounterUpdate
}

type EncounterUpdate {
  resource : Encounter
  information : OperationOutcome
}

type EncounterDeleteType {
  EncounterDelete(id : ID) : EncounterDelete
}

type EncounterDelete {
  information : OperationOutcome
}

