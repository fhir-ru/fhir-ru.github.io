# FHIR GraphQL Schema. Version 4.0.1

type MessageDefinition {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  url: uri  _url: ElementBase
  identifier: [Identifier]
  version: String  _version: ElementBase
  name: String  _name: ElementBase
  title: String  _title: ElementBase
  replaces: canonical  _replaces: [ElementBase]
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  date: dateTime  _date: ElementBase
  publisher: String  _publisher: ElementBase
  contact: [ContactDetail]
  description: markdown  _description: ElementBase
  useContext: [UsageContext]
  jurisdiction: [CodeableConcept]
  purpose: markdown  _purpose: ElementBase
  copyright: markdown  _copyright: ElementBase
  base: canonical  _base: ElementBase
  parent: canonical  _parent: [ElementBase]
  eventCoding: Coding
  eventUri: uri  _eventUri: ElementBase
  category: code  _category: ElementBase
  focus: [MessageDefinitionFocus]
  responseRequired: code  _responseRequired: ElementBase
  allowedResponse: [MessageDefinitionAllowedResponse]
  graph: canonical  _graph: [ElementBase]
}

type MessageDefinitionFocus {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  code: code  _code: ElementBase
  profile: canonical  _profile: ElementBase
  min: unsignedInt  _min: ElementBase
  max: String  _max: ElementBase
}

type MessageDefinitionAllowedResponse {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  message: canonical  _message: ElementBase
  situation: markdown  _situation: ElementBase
}

input MessageDefinition {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  url: uri  _url: ElementBase
  identifier: [Identifier]
  version: String  _version: ElementBase
  name: String  _name: ElementBase
  title: String  _title: ElementBase
  replaces: canonical  _replaces: [ElementBase]
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  date: dateTime  _date: ElementBase
  publisher: String  _publisher: ElementBase
  contact: [ContactDetail]
  description: markdown  _description: ElementBase
  useContext: [UsageContext]
  jurisdiction: [CodeableConcept]
  purpose: markdown  _purpose: ElementBase
  copyright: markdown  _copyright: ElementBase
  base: canonical  _base: ElementBase
  parent: canonical  _parent: [ElementBase]
  eventCoding: Coding
  eventUri: uri  _eventUri: ElementBase
  category: code  _category: ElementBase
  focus: [MessageDefinitionFocus]
  responseRequired: code  _responseRequired: ElementBase
  allowedResponse: [MessageDefinitionAllowedResponse]
  graph: canonical  _graph: [ElementBase]
}

input MessageDefinitionFocus {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  code: code  _code: ElementBase
  profile: canonical  _profile: ElementBase
  min: unsignedInt  _min: ElementBase
  max: String  _max: ElementBase
}

input MessageDefinitionAllowedResponse {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  message: canonical  _message: ElementBase
  situation: markdown  _situation: ElementBase
}

type MessageDefinitionReadType {
  MessageDefinition(id : ID!) : MessageDefinition
}

type MessageDefinitionListType {
  MessageDefinitionList(_filter : String
    category : [token]
    context : [token]
    context_quantity : [quantity]
    context_type : [token]
    context_type_quantity : [composite]
    context_type_value : [composite]
    date : [date]
    description : [String]
    event : [token]
    focus : [token]
    identifier : [token]
    jurisdiction : [token]
    name : [String]
    parent : [reference]
    publisher : [String]
    status : [token]
    title : [String]
    url : [uri]
    version : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : [MessageDefinition]
}

type MessageDefinitionConnectionType {
  MessageDefinitionConection(_filter : String
    category : [token]
    context : [token]
    context_quantity : [quantity]
    context_type : [token]
    context_type_quantity : [composite]
    context_type_value : [composite]
    date : [date]
    description : [String]
    event : [token]
    focus : [token]
    identifier : [token]
    jurisdiction : [token]
    name : [String]
    parent : [reference]
    publisher : [String]
    status : [token]
    title : [String]
    url : [uri]
    version : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : MessageDefinitionConnection
}

type MessageDefinitionConnection {
  count : Int
  offset : Int
  pagesize : Int
  first : ID
  previous : ID
  next : ID
  last : ID
  edges : [MessageDefinitionEdge]
}

type MessageDefinitionEdge {
  mode : String
  score : Float
  resource : MessageDefinition
}

type MessageDefinitionCreateType {
  MessageDefinitionCreate(resource : MessageDefinition) : MessageDefinitionCreation
}

type MessageDefinitionCreation {
  location : String
  resource : MessageDefinition
  information : OperationOutcome
}

type MessageDefinitionUpdateType {
  MessageDefinitionUpdate(id : IDresource : MessageDefinition) : MessageDefinitionUpdate
}

type MessageDefinitionUpdate {
  resource : MessageDefinition
  information : OperationOutcome
}

type MessageDefinitionDeleteType {
  MessageDefinitionDelete(id : ID) : MessageDefinitionDelete
}

type MessageDefinitionDelete {
  information : OperationOutcome
}

