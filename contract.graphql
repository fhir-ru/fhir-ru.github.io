# FHIR GraphQL Schema. Version 4.0.1

type Contract {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  url: uri  _url: ElementBase
  version: String  _version: ElementBase
  status: code  _status: ElementBase
  legalState: CodeableConcept
  instantiatesCanonical: Reference
  instantiatesUri: uri  _instantiatesUri: ElementBase
  contentDerivative: CodeableConcept
  issued: dateTime  _issued: ElementBase
  applies: Period
  expirationType: CodeableConcept
  subject: [Reference]
  authority: [Reference]
  domain: [Reference]
  site: [Reference]
  name: String  _name: ElementBase
  title: String  _title: ElementBase
  subtitle: String  _subtitle: ElementBase
  alias: String  _alias: [ElementBase]
  author: Reference
  scope: CodeableConcept
  topicCodeableConcept: CodeableConcept
  topicReference: Reference
  type: CodeableConcept
  subType: [CodeableConcept]
  contentDefinition: ContractContentDefinition
  term: [ContractTerm]
  supportingInfo: [Reference]
  relevantHistory: [Reference]
  signer: [ContractSigner]
  friendly: [ContractFriendly]
  legal: [ContractLegal]
  rule: [ContractRule]
  legallyBindingAttachment: Attachment
  legallyBindingReference: Reference
}

type ContractContentDefinition {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: CodeableConcept!
  subType: CodeableConcept
  publisher: Reference
  publicationDate: dateTime  _publicationDate: ElementBase
  publicationStatus: code  _publicationStatus: ElementBase
  copyright: markdown  _copyright: ElementBase
}

type ContractTerm {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: Identifier
  issued: dateTime  _issued: ElementBase
  applies: Period
  topicCodeableConcept: CodeableConcept
  topicReference: Reference
  type: CodeableConcept
  subType: CodeableConcept
  text: String  _text: ElementBase
  securityLabel: [ContractTermSecurityLabel]
  offer: ContractTermOffer!
  asset: [ContractTermAsset]
  action: [ContractTermAction]
  group: [ContractTerm]
}

type ContractTermSecurityLabel {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  number: unsignedInt  _number: [ElementBase]
  classification: Coding!
  category: [Coding]
  control: [Coding]
}

type ContractTermOffer {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  party: [ContractTermOfferParty]
  topic: Reference
  type: CodeableConcept
  decision: CodeableConcept
  decisionMode: [CodeableConcept]
  answer: [ContractTermOfferAnswer]
  text: String  _text: ElementBase
  linkId: String  _linkId: [ElementBase]
  securityLabelNumber: unsignedInt  _securityLabelNumber: [ElementBase]
}

type ContractTermOfferParty {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  reference: [Reference]!
  role: CodeableConcept!
}

type ContractTermOfferAnswer {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  valueBoolean: Boolean  _valueBoolean: ElementBase
  valueDecimal: decimal  _valueDecimal: ElementBase
  valueInteger: Int  _valueInteger: ElementBase
  valueDate: date  _valueDate: ElementBase
  valueDateTime: dateTime  _valueDateTime: ElementBase
  valueTime: time  _valueTime: ElementBase
  valueString: String  _valueString: ElementBase
  valueUri: uri  _valueUri: ElementBase
  valueAttachment: Attachment
  valueCoding: Coding
  valueQuantity: Quantity
  valueReference: Reference
}

type ContractTermAsset {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  scope: CodeableConcept
  type: [CodeableConcept]
  typeReference: [Reference]
  subtype: [CodeableConcept]
  relationship: Coding
  context: [ContractTermAssetContext]
  condition: String  _condition: ElementBase
  periodType: [CodeableConcept]
  period: [Period]
  usePeriod: [Period]
  text: String  _text: ElementBase
  linkId: String  _linkId: [ElementBase]
  answer: [ContractTermOfferAnswer]
  securityLabelNumber: unsignedInt  _securityLabelNumber: [ElementBase]
  valuedItem: [ContractTermAssetValuedItem]
}

type ContractTermAssetContext {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  reference: Reference
  code: [CodeableConcept]
  text: String  _text: ElementBase
}

type ContractTermAssetValuedItem {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  entityCodeableConcept: CodeableConcept
  entityReference: Reference
  identifier: Identifier
  effectiveTime: dateTime  _effectiveTime: ElementBase
  quantity: Quantity
  unitPrice: Money
  factor: decimal  _factor: ElementBase
  points: decimal  _points: ElementBase
  net: Money
  payment: String  _payment: ElementBase
  paymentDate: dateTime  _paymentDate: ElementBase
  responsible: Reference
  recipient: Reference
  linkId: String  _linkId: [ElementBase]
  securityLabelNumber: unsignedInt  _securityLabelNumber: [ElementBase]
}

type ContractTermAction {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  doNotPerform: Boolean  _doNotPerform: ElementBase
  type: CodeableConcept!
  subject: [ContractTermActionSubject]
  intent: CodeableConcept!
  linkId: String  _linkId: [ElementBase]
  status: CodeableConcept!
  context: Reference
  contextLinkId: String  _contextLinkId: [ElementBase]
  occurrenceDateTime: dateTime  _occurrenceDateTime: ElementBase
  occurrencePeriod: Period
  occurrenceTiming: Timing
  requester: [Reference]
  requesterLinkId: String  _requesterLinkId: [ElementBase]
  performerType: [CodeableConcept]
  performerRole: CodeableConcept
  performer: Reference
  performerLinkId: String  _performerLinkId: [ElementBase]
  reasonCode: [CodeableConcept]
  reasonReference: [Reference]
  reason: String  _reason: [ElementBase]
  reasonLinkId: String  _reasonLinkId: [ElementBase]
  note: [Annotation]
  securityLabelNumber: unsignedInt  _securityLabelNumber: [ElementBase]
}

type ContractTermActionSubject {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  reference: [Reference]!
  role: CodeableConcept
}

type ContractSigner {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: Coding!
  party: Reference!
  signature: [Signature]!
}

type ContractFriendly {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  contentAttachment: Attachment
  contentReference: Reference
}

type ContractLegal {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  contentAttachment: Attachment
  contentReference: Reference
}

type ContractRule {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  contentAttachment: Attachment
  contentReference: Reference
}

input Contract {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  url: uri  _url: ElementBase
  version: String  _version: ElementBase
  status: code  _status: ElementBase
  legalState: CodeableConcept
  instantiatesCanonical: Reference
  instantiatesUri: uri  _instantiatesUri: ElementBase
  contentDerivative: CodeableConcept
  issued: dateTime  _issued: ElementBase
  applies: Period
  expirationType: CodeableConcept
  subject: [Reference]
  authority: [Reference]
  domain: [Reference]
  site: [Reference]
  name: String  _name: ElementBase
  title: String  _title: ElementBase
  subtitle: String  _subtitle: ElementBase
  alias: String  _alias: [ElementBase]
  author: Reference
  scope: CodeableConcept
  topicCodeableConcept: CodeableConcept
  topicReference: Reference
  type: CodeableConcept
  subType: [CodeableConcept]
  contentDefinition: ContractContentDefinition
  term: [ContractTerm]
  supportingInfo: [Reference]
  relevantHistory: [Reference]
  signer: [ContractSigner]
  friendly: [ContractFriendly]
  legal: [ContractLegal]
  rule: [ContractRule]
  legallyBindingAttachment: Attachment
  legallyBindingReference: Reference
}

input ContractContentDefinition {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: CodeableConcept!
  subType: CodeableConcept
  publisher: Reference
  publicationDate: dateTime  _publicationDate: ElementBase
  publicationStatus: code  _publicationStatus: ElementBase
  copyright: markdown  _copyright: ElementBase
}

input ContractTerm {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: Identifier
  issued: dateTime  _issued: ElementBase
  applies: Period
  topicCodeableConcept: CodeableConcept
  topicReference: Reference
  type: CodeableConcept
  subType: CodeableConcept
  text: String  _text: ElementBase
  securityLabel: [ContractTermSecurityLabel]
  offer: ContractTermOffer!
  asset: [ContractTermAsset]
  action: [ContractTermAction]
  group: [ContractTerm]
}

input ContractTermSecurityLabel {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  number: unsignedInt  _number: [ElementBase]
  classification: Coding!
  category: [Coding]
  control: [Coding]
}

input ContractTermOffer {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  party: [ContractTermOfferParty]
  topic: Reference
  type: CodeableConcept
  decision: CodeableConcept
  decisionMode: [CodeableConcept]
  answer: [ContractTermOfferAnswer]
  text: String  _text: ElementBase
  linkId: String  _linkId: [ElementBase]
  securityLabelNumber: unsignedInt  _securityLabelNumber: [ElementBase]
}

input ContractTermOfferParty {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  reference: [Reference]!
  role: CodeableConcept!
}

input ContractTermOfferAnswer {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  valueBoolean: Boolean  _valueBoolean: ElementBase
  valueDecimal: decimal  _valueDecimal: ElementBase
  valueInteger: Int  _valueInteger: ElementBase
  valueDate: date  _valueDate: ElementBase
  valueDateTime: dateTime  _valueDateTime: ElementBase
  valueTime: time  _valueTime: ElementBase
  valueString: String  _valueString: ElementBase
  valueUri: uri  _valueUri: ElementBase
  valueAttachment: Attachment
  valueCoding: Coding
  valueQuantity: Quantity
  valueReference: Reference
}

input ContractTermAsset {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  scope: CodeableConcept
  type: [CodeableConcept]
  typeReference: [Reference]
  subtype: [CodeableConcept]
  relationship: Coding
  context: [ContractTermAssetContext]
  condition: String  _condition: ElementBase
  periodType: [CodeableConcept]
  period: [Period]
  usePeriod: [Period]
  text: String  _text: ElementBase
  linkId: String  _linkId: [ElementBase]
  answer: [ContractTermOfferAnswer]
  securityLabelNumber: unsignedInt  _securityLabelNumber: [ElementBase]
  valuedItem: [ContractTermAssetValuedItem]
}

input ContractTermAssetContext {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  reference: Reference
  code: [CodeableConcept]
  text: String  _text: ElementBase
}

input ContractTermAssetValuedItem {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  entityCodeableConcept: CodeableConcept
  entityReference: Reference
  identifier: Identifier
  effectiveTime: dateTime  _effectiveTime: ElementBase
  quantity: Quantity
  unitPrice: Money
  factor: decimal  _factor: ElementBase
  points: decimal  _points: ElementBase
  net: Money
  payment: String  _payment: ElementBase
  paymentDate: dateTime  _paymentDate: ElementBase
  responsible: Reference
  recipient: Reference
  linkId: String  _linkId: [ElementBase]
  securityLabelNumber: unsignedInt  _securityLabelNumber: [ElementBase]
}

input ContractTermAction {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  doNotPerform: Boolean  _doNotPerform: ElementBase
  type: CodeableConcept!
  subject: [ContractTermActionSubject]
  intent: CodeableConcept!
  linkId: String  _linkId: [ElementBase]
  status: CodeableConcept!
  context: Reference
  contextLinkId: String  _contextLinkId: [ElementBase]
  occurrenceDateTime: dateTime  _occurrenceDateTime: ElementBase
  occurrencePeriod: Period
  occurrenceTiming: Timing
  requester: [Reference]
  requesterLinkId: String  _requesterLinkId: [ElementBase]
  performerType: [CodeableConcept]
  performerRole: CodeableConcept
  performer: Reference
  performerLinkId: String  _performerLinkId: [ElementBase]
  reasonCode: [CodeableConcept]
  reasonReference: [Reference]
  reason: String  _reason: [ElementBase]
  reasonLinkId: String  _reasonLinkId: [ElementBase]
  note: [Annotation]
  securityLabelNumber: unsignedInt  _securityLabelNumber: [ElementBase]
}

input ContractTermActionSubject {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  reference: [Reference]!
  role: CodeableConcept
}

input ContractSigner {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: Coding!
  party: Reference!
  signature: [Signature]!
}

input ContractFriendly {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  contentAttachment: Attachment
  contentReference: Reference
}

input ContractLegal {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  contentAttachment: Attachment
  contentReference: Reference
}

input ContractRule {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  contentAttachment: Attachment
  contentReference: Reference
}

type ContractReadType {
  Contract(id : ID!) : Contract
}

type ContractListType {
  ContractList(_filter : String
    authority : [reference]
    domain : [reference]
    identifier : [token]
    instantiates : [uri]
    issued : [date]
    patient : [reference]
    signer : [reference]
    status : [token]
    subject : [reference]
    url : [uri]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : [Contract]
}

type ContractConnectionType {
  ContractConection(_filter : String
    authority : [reference]
    domain : [reference]
    identifier : [token]
    instantiates : [uri]
    issued : [date]
    patient : [reference]
    signer : [reference]
    status : [token]
    subject : [reference]
    url : [uri]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : ContractConnection
}

type ContractConnection {
  count : Int
  offset : Int
  pagesize : Int
  first : ID
  previous : ID
  next : ID
  last : ID
  edges : [ContractEdge]
}

type ContractEdge {
  mode : String
  score : Float
  resource : Contract
}

type ContractCreateType {
  ContractCreate(resource : Contract) : ContractCreation
}

type ContractCreation {
  location : String
  resource : Contract
  information : OperationOutcome
}

type ContractUpdateType {
  ContractUpdate(id : IDresource : Contract) : ContractUpdate
}

type ContractUpdate {
  resource : Contract
  information : OperationOutcome
}

type ContractDeleteType {
  ContractDelete(id : ID) : ContractDelete
}

type ContractDelete {
  information : OperationOutcome
}

