# FHIR GraphQL Schema. Version 4.0.1

type Provenance {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  target: [Reference]!
  occurredPeriod: Period
  occurredDateTime: dateTime  _occurredDateTime: ElementBase
  recorded: instant  _recorded: ElementBase
  policy: uri  _policy: [ElementBase]
  location: Reference
  reason: [CodeableConcept]
  activity: CodeableConcept
  agent: [ProvenanceAgent]!
  entity: [ProvenanceEntity]
  signature: [Signature]
}

type ProvenanceAgent {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: CodeableConcept
  role: [CodeableConcept]
  who: Reference!
  onBehalfOf: Reference
}

type ProvenanceEntity {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  role: code  _role: ElementBase
  what: Reference!
  agent: [ProvenanceAgent]
}

input Provenance {
  id: String
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  target: [Reference]!
  occurredPeriod: Period
  occurredDateTime: dateTime  _occurredDateTime: ElementBase
  recorded: instant  _recorded: ElementBase
  policy: uri  _policy: [ElementBase]
  location: Reference
  reason: [CodeableConcept]
  activity: CodeableConcept
  agent: [ProvenanceAgent]!
  entity: [ProvenanceEntity]
  signature: [Signature]
}

input ProvenanceAgent {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: CodeableConcept
  role: [CodeableConcept]
  who: Reference!
  onBehalfOf: Reference
}

input ProvenanceEntity {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  role: code  _role: ElementBase
  what: Reference!
  agent: [ProvenanceAgent]
}

type ProvenanceReadType {
  Provenance(id : ID!) : Provenance
}

type ProvenanceListType {
  ProvenanceList(_filter : String
    agent : [reference]
    agent_role : [token]
    agent_type : [token]
    entity : [reference]
    location : [reference]
    patient : [reference]
    recorded : [date]
    signature_type : [token]
    target : [reference]
    when : [date]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : [Provenance]
}

type ProvenanceConnectionType {
  ProvenanceConection(_filter : String
    agent : [reference]
    agent_role : [token]
    agent_type : [token]
    entity : [reference]
    location : [reference]
    patient : [reference]
    recorded : [date]
    signature_type : [token]
    target : [reference]
    when : [date]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [uri]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : ProvenanceConnection
}

type ProvenanceConnection {
  count : Int
  offset : Int
  pagesize : Int
  first : ID
  previous : ID
  next : ID
  last : ID
  edges : [ProvenanceEdge]
}

type ProvenanceEdge {
  mode : String
  score : Float
  resource : Provenance
}

type ProvenanceCreateType {
  ProvenanceCreate(resource : Provenance) : ProvenanceCreation
}

type ProvenanceCreation {
  location : String
  resource : Provenance
  information : OperationOutcome
}

type ProvenanceUpdateType {
  ProvenanceUpdate(id : IDresource : Provenance) : ProvenanceUpdate
}

type ProvenanceUpdate {
  resource : Provenance
  information : OperationOutcome
}

type ProvenanceDeleteType {
  ProvenanceDelete(id : ID) : ProvenanceDelete
}

type ProvenanceDelete {
  information : OperationOutcome
}

